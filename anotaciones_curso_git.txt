Curso de Git Fernando Herrera

Configuracion de git

git config --global user.name 'versace123mx'
git config --global user.email 'versace123mx@gmail.com'

verificar la configuracion global
git config --global -e


Existen 3 area en un git
1) area de tabajo, cuando realizamos cambios de un archivo y ejecutamos en cosola git status, este archivo se mostrara en color rojo indicando que estan un archivo modificado en el area de trabajo.
2) stegin, stegin es el area don se encuentran los archivos agregados del area de trabajo asia stegin
3) commit, esta area es donde se realiza una imagen del codigo con las modificaciones correspondientes por si requermis regresar a este punto y verifiquemos los archivos modificados.

como iniciar un repositorio de git
ir al directorio donde tenemos el proyecto y ejecutar
git init

ahora podemos ejecutar git status el cual nos mostrara un status de nuestros archivos de git.
en este caso como es la primera vez git nos mostrara todos los archivos en color rojo indicando esto que git no sigue estos archivos todavia para ello tenemos que agregarlos para que git los pueda trackear o seguir.
para ello utilizamos 
git add .
con este comando git agregara todos a su area de trabajo y cualquier modificacion a estos archivos git nos lo indicara cuando hagamos un git status.

si ahora hacemos un git status todos los archivos nos aparareceran en color verde esto quiere decir que git los tiene ahora en seguimiento o trakeados.

un commit es una especie de snap shot o captura de un momento en el cual se encontraba el codigo en ese comento. y podemos mediante ello tener un historial del proceso de nuestros ajustes.

para ejecutar un commit hacemos lo siguiente
git commit -m 'mensaje del commit'


cuando ejecutemos git status este nos indicara que estamos en un directorio limpio sin cambios, si realizamos nuevos cambios entonces ejecutamos git status y este nos mostrara en color rojo los archivos que han sido modificados, y seguimos el mismo proces de agregarlo al area de trabajo y despues a stegin para posterior hacer un commit de los cambios.
No es recomendable hacer commit por cada ajuste menor, es recomendable hacer commit pero por tareas terminadas.

Hay veces que hay harchivos que no queremos agregar o no lo queremos en un commit para ello ejecutamos
git checkout nombre_del_archivo
pero hay veces que son demaciados archivos o no queremos ninguno para ello podemos utilizar
git checkout -- . y este comando nos desagregara todos los archivos que estan en el area de trabajo

Agregar todos los archivos de una extencion, de nuestra area de trabajo a stegin
git add *.png

podemos excluir archivos que estan en el area de stegin esto nos devolvera todo lo que indicamos al area de trabajo
git reset HEAD nombre del archivo
git reset HEAT *.extencion o carpeta

podemos descartar cambios de el area de trabajo
git checkout -- nombre del archivo
git checkout -- . todos
git checkout -- *.exencion

Nota: si tenemos archivos en el area de trabajo y en el area de stegin al mismo tiempo, podemos hacer commit de los archivos que estan en stegin y tambien podemos descartar cambios en el directorio de trabajo ya que son areas distintas tanto stegin es un area como el working directory es otro.

git config core.autocrlf true


como ver los comits realizado
git log
git log --oneline
git log --oneline  --decorate --all --graph   para ver las ramas y de una forma elegante todas las ramas



Como ver los cambios de un archivo siempre y cuando en el area de trabajo
git diff 

Como ver los cambios que estan en el area de stegin pero aun no han sido commiteados
git diff --staged

Como enmendar o reparar el titulo del ultimo commit
git commit --amend -m 'mensaje a cambiar'

Supongamos que tenemos el ultimo commit que falto aplicarle ajustes, aplicamos los siguientes cambios y esto lo que nos hara sera eliminar el ultimo commit y regresarnos todos los cambios a como estaban antes del ultimo commit osea que los cambios echo apareceran como en el area de trabajo para comitear.
Deahacer un commit y aplicar cambios en ese commit
1) git rest --soft HEAD^  nos regresa a un commit antes del ultimo para hacer los ajustes pertinentes
2) hacer los cambios pertinenetes
3) hacer commit


Como regresarnos a un commit especifico y que ese se quede como master eliminando los commits que esten desdepues de este.
1) git reset --mixed has del commit a donde nos moveremos
2) git reset --hard has del commit donde nos queremos quedar como head

Nota: despues de hacer git rest --hard y a un que hagamos git log o git status los cambios despues de este punto de la historia ya no aparecen, pero hay una forma de encontrarlos y volver a recuperarlos.
git reflog vemos los cambios que hemos realizado y para regresar a un punto especifico cogemos el has
git reset --hard has a donde nos vamos a mover ahora



renombrar archivo
git mv nombreactual nombre_despues
realizar commit para efectuar los cambios

eliminar archivo
git rm nombrearchivo
realizar commit para efectuar los cambios

como ignorar archivos que no sean trakeados por git
crear un archivo .gitignore
en ese archivo cargar los nombre de los archivos que no queremos que git siga
podemos hacer algo como *.log esto dice que todos los archivos .log no los traque
el .gitignore si debe de ser traqueado por que es el archivo que sabe cuales archivos no seran trakeados

generar una rama
git checkout -b   y esto nos crea una rama y nos mueve a esa rama
git branch nombrederama   esto nos crea una rama pero no nos mueve hay que movernos a esa rama

como movernos entre ramas
git checkout nombrerama

git branch nos dice cuales son las ramas que hay

git diff ramaactual ramamaster  nos dice las diferencias entre las ramas

como unir una rama
1) la rama que se unira depende en que branch estemos
si estamos fuera de master y queremos unir master con esa rama hacemos lo siguiente
estar en la rama y git merge master  de esta forma unimos a nuestra rama actual lo que hay en master
master seguira con los ultimos cambio mas no con los cambios de la rama actual, pero de esta forma nos aseguramos que en esta union no existan conflicto y haci poder luego unir master con la rama de modificaciones

borrar rama
git branch -d nombrerama
git branch -D nombrerama  este es una eliminacion fuerte si es que el anterior comando no nos permite borrar la rama

Creando tags
git tag nombredeltag

como ver los tags
git tag

borrar tag
git tag -d nombredeltagaborrar


crear un tag en algun commit especifico
git tag -a v1.0.0 hascorto -m'mensaje del tag'


ver los tags de una forma mas explcita
git show nombredeltag

git stash save 'mensaje de donde estamos trabajando' el stash es una forma que nos da git para mantener salvado los cambios que teniamos y volver a tener la rama como estaba la ultima vez sin esos cambios que estan en el area de trabajo. posteriormente podemos hacer otras cosas y si mas adelante queremos recuperar ese stash se puede recuperar.

ver lo que hay en stash
git stash list
git show stash nos muestra detalle y ajustes que tiene el stash
git show stash@{5} nos muestra informacion detallada del stash 5

git stash pop aplica el ultimo stash al area de trabajo actual y lo borra siempre y cuando no aya conclictos, si hay conflictos no borra el stash

git stash apply stash@{1} aplica el stash numero 1 al area de trabajo actual pero no borra el stash como pop

git stash apply has nos permite recuperar un stash borrado, siempre y cuadno tengamos el has, por ello despues de borrar un stash erroneamente es recomendable no cerrar la ventana y copiar el has posteriormente aplicarlo y listo

como borrar un stash
git stash drop 1  esto borrara el stash 1
git stash drop stash@{1} borramos el stash 1
git stash drop elimina el primer stash de la lista

git stash clear borra todo lo que este en el stash

ahora trabajaremos con rebase